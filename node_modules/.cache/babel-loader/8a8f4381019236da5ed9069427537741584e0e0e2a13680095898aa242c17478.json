{"ast":null,"code":"export const formatDate = date => {\n  return date.toISOString().split('T')[0];\n};\nexport const getToday = () => {\n  return formatDate(new Date());\n};\nexport const getCurrentMonth = () => {\n  const now = new Date();\n  return {\n    year: now.getFullYear(),\n    month: now.getMonth()\n  };\n};\nexport const getDaysInMonth = (year, month) => {\n  const firstDay = new Date(year, month, 1);\n  const lastDay = new Date(year, month + 1, 0);\n  const days = [];\n\n  // Add days from previous month to fill first week\n  const firstDayOfWeek = firstDay.getDay();\n  for (let i = firstDayOfWeek - 1; i >= 0; i--) {\n    days.push(new Date(year, month, -i));\n  }\n\n  // Add all days of current month\n  for (let day = 1; day <= lastDay.getDate(); day++) {\n    days.push(new Date(year, month, day));\n  }\n\n  // Add days from next month to fill last week\n  const lastDayOfWeek = lastDay.getDay();\n  for (let day = 1; day <= 6 - lastDayOfWeek; day++) {\n    days.push(new Date(year, month + 1, day));\n  }\n  return days;\n};\nexport const isToday = date => {\n  const today = new Date();\n  return date.toDateString() === today.toDateString();\n};\nexport const isSameDate = (date1, date2) => {\n  return date1 === date2;\n};\nexport const getMonthName = month => {\n  const months = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'];\n  return months[month];\n};\nexport const calculateStreak = completedDates => {\n  if (completedDates.length === 0) return 0;\n  const sortedDates = completedDates.sort().reverse();\n  const today = getToday();\n  let streak = 0;\n  let currentDate = new Date(today);\n  for (const dateStr of sortedDates) {\n    const date = new Date(dateStr);\n    const diffTime = currentDate.getTime() - date.getTime();\n    const diffDays = Math.ceil(diffTime / (1000 * 60 * 60 * 24));\n    if (diffDays <= 1) {\n      streak++;\n      currentDate = date;\n    } else {\n      break;\n    }\n  }\n  return streak;\n};","map":{"version":3,"names":["formatDate","date","toISOString","split","getToday","Date","getCurrentMonth","now","year","getFullYear","month","getMonth","getDaysInMonth","firstDay","lastDay","days","firstDayOfWeek","getDay","i","push","day","getDate","lastDayOfWeek","isToday","today","toDateString","isSameDate","date1","date2","getMonthName","months","calculateStreak","completedDates","length","sortedDates","sort","reverse","streak","currentDate","dateStr","diffTime","getTime","diffDays","Math","ceil"],"sources":["/Users/palimaracharan/Desktop/Habits_Tracker/src/utils/dateUtils.ts"],"sourcesContent":["export const formatDate = (date: Date): string => {\n  return date.toISOString().split('T')[0];\n};\n\nexport const getToday = (): string => {\n  return formatDate(new Date());\n};\n\nexport const getCurrentMonth = (): { year: number; month: number } => {\n  const now = new Date();\n  return { year: now.getFullYear(), month: now.getMonth() };\n};\n\nexport const getDaysInMonth = (year: number, month: number): Date[] => {\n  const firstDay = new Date(year, month, 1);\n  const lastDay = new Date(year, month + 1, 0);\n  const days: Date[] = [];\n\n  // Add days from previous month to fill first week\n  const firstDayOfWeek = firstDay.getDay();\n  for (let i = firstDayOfWeek - 1; i >= 0; i--) {\n    days.push(new Date(year, month, -i));\n  }\n\n  // Add all days of current month\n  for (let day = 1; day <= lastDay.getDate(); day++) {\n    days.push(new Date(year, month, day));\n  }\n\n  // Add days from next month to fill last week\n  const lastDayOfWeek = lastDay.getDay();\n  for (let day = 1; day <= 6 - lastDayOfWeek; day++) {\n    days.push(new Date(year, month + 1, day));\n  }\n\n  return days;\n};\n\nexport const isToday = (date: Date): boolean => {\n  const today = new Date();\n  return date.toDateString() === today.toDateString();\n};\n\nexport const isSameDate = (date1: string, date2: string): boolean => {\n  return date1 === date2;\n};\n\nexport const getMonthName = (month: number): string => {\n  const months = [\n    'January', 'February', 'March', 'April', 'May', 'June',\n    'July', 'August', 'September', 'October', 'November', 'December'\n  ];\n  return months[month];\n};\n\nexport const calculateStreak = (completedDates: string[]): number => {\n  if (completedDates.length === 0) return 0;\n\n  const sortedDates = completedDates.sort().reverse();\n  const today = getToday();\n  let streak = 0;\n  let currentDate = new Date(today);\n\n  for (const dateStr of sortedDates) {\n    const date = new Date(dateStr);\n    const diffTime = currentDate.getTime() - date.getTime();\n    const diffDays = Math.ceil(diffTime / (1000 * 60 * 60 * 24));\n\n    if (diffDays <= 1) {\n      streak++;\n      currentDate = date;\n    } else {\n      break;\n    }\n  }\n\n  return streak;\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}